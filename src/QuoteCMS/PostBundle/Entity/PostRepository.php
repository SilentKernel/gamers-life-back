<?php

namespace QuoteCMS\PostBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    const requestBase =
        "SELECT p, g, s " .
        "FROM QuoteCMSPostBundle:Post p " .
        "JOIN p.game g " .
        "JOIN p.shareCount s ".
        "WHERE p.creationDate <= :now ".
        "AND p.validated = :validated ";

    const limitModeratorDate = "-4 day";

    function getAll($user = null)
    {

        $queryString = self::requestBase . "ORDER BY p.id DESC ";

        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);
        $query->useQueryCache(true);

        return $query;
    }

    function gettAllWithResult($user = null)
    {
        $query = $this->getAll($user);
        return $query->getResult();
    }

    function getIdValidated($user = null)
    {
          $queryString ="SELECT p.id AS id " .
          "FROM QuoteCMSPostBundle:Post p " .
          "WHERE p.creationDate <= :now ".
          "AND p.validated = :validated ";
          $query = $this->_em->createQuery($queryString);
          $query->setParameter(":now", new \DateTime("now"));
          $query->setParameter(":validated", true);
          $query->useQueryCache(true);

          $result = $query->getArrayResult();

          return $result;
    }

    function getPostsRandom($idlist)
    {
        $queryString = self::requestBase . "AND p.id IN (:idlist)";
        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":idlist", $idlist);
        $query->useQueryCache(true);

        $result = $query->getResult();

        return $result;

    }

    function getPostsSinceOrigin($user = null)
    {
        $queryString = self::requestBase . "ORDER BY p.id ASC";
        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);
        $query->useQueryCache(true);

        return $query;

    }

    function getByPlusOne($user = null)
    {

        $queryString = self::requestBase . "ORDER BY p.plusOne DESC, p.id DESC ";

        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);
        $query->useQueryCache(true);

        return $query;
    }

    function getByLeastOne($user = null)
    {

        $queryString = self::requestBase . "ORDER BY p.leastOne DESC, p.id DESC ";

        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);


        return $query;
    }

    function getByGame($gameSlug)
    {

        $queryString = self::requestBase . "AND g.slug = :gameSlug ORDER BY p.id DESC ";

        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);
        $query->setParameter(":gameSlug", $gameSlug);
        $query->useQueryCache(true);


        return $query;
    }

    function getByCategory($categorySlug)
    {

        $queryString = "SELECT p, g, c " .
            "FROM QuoteCMSPostBundle:Post p " .
            "JOIN p.game g " .
            "JOIN g.category c ".
            "WHERE p.creationDate <= :now ".
            "AND c.slug = :categorySlug ".
            "AND p.validated = :validated ";

        $query = $this->_em->createQuery($queryString);
        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);
        $query->setParameter(":categorySlug", $categorySlug);
        $query->useQueryCache(true);


        return $query;
    }

    function getNbPostsByUser($user)
    {
        $query = $this->_em->createQuery(
            'SELECT count(p) AS nbPosts '.
            'FROM QuoteCMSUserBundle:User u '.
            'JOIN QuoteCMSPostBundle:Post p '.
            'WHERE u.id = :user_id '.
            'AND p.user = u.id '.
            'AND p.validated = true '.
            'AND p.anonymous = false');
        $query->setParameter('user_id', $user->getId());
        $query->useQueryCache(true);

        $result = $query->getArrayResult();

        return $result[0]['nbPosts'];
    }

    function getNbLikesByUser($user)
    {
        $query = $this->_em->createQuery(
            'SELECT SUM(p.plusOne) AS nbLikes '.
            'FROM QuoteCMSUserBundle:User u '.
            'JOIN QuoteCMSPostBundle:Post p '.
            'WHERE u.id = :user_id '.
            'AND p.user = u.id '.
            'AND p.validated = true '.
            'AND p.anonymous = false');
        $query->setParameter('user_id', $user->getId());

        $query->useQueryCache(true);

        $result = $query->getArrayResult();
        if ($result[0]['nbLikes']==NULL)
        {
            return 0;
        }
        return $result[0]['nbLikes'];
    }

    function getNbNoValidatedPosts()
    {
        // Date maximum de validation des GL
        $limit_date =  new \DateTime("now");
        $limit_date->modify( self::limitModeratorDate);

        $query = $this->_em->createQuery(
            "COUNT count(p) AS nbPosts " .
            "FROM QuoteCMSPostBundle:Post p " .
            "WHERE p.creationDate >= :limitedate ".
            "AND p.validated = :validated ");
        $query->setParameter(":limitedate", $limit_date);
        $query->setParameter(":validated", false);
        $query->useQueryCache(true);

        $result = $query->getArrayResult();

        return $result[0]['nbPosts'];
    }

    function getNoValidatedPosts()
    {
        // Date maximum de validation des GL
        $limit_date =  new \DateTime("now");
        $limit_date->modify( self::limitModeratorDate);

        $query = $this->_em->createQuery("SELECT p, g " .
            "FROM QuoteCMSPostBundle:Post p " .
            "JOIN p.game g " .
            "WHERE p.creationDate >= :limitedate ".
            "AND p.validated = :validated ".
            "ORDER BY p.id DESC");
        $query->setParameter(":limitedate", $limit_date);
        $query->setParameter(":validated", false);
        $query->useQueryCache(true);

        $result = $query->getResult();

        return $result;
    }

    public function getByGameId($gameId)
    {
        $query = $this->_em->createQuery(self::requestBase .
        "AND g.id = :gameId ORDER BY p.id DESC");

        $query->setParameter(":now", new \DateTime("now"));
        $query->setParameter(":validated", true);

        $query->setParameter(":gameId", $gameId);
        $query->useQueryCache(true);

        return $query;
    }
}
